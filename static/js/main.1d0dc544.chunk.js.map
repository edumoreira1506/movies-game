{"version":3,"sources":["services/api.js","services/GameService.js","services/RankingService.js","services/CategoryService.js","models/Category.js","models/Quizzes.js","models/User.js","contexts/quizzes.js","components/Question/index.js","components/Questions/index.js","components/Loading/index.js","models/Ranking.js","components/Ranking/index.js","pages/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["require","config","api","axios","create","baseURL","process","headers","setup","a","get","data","store","rankingUser","post","show","findAll","getQuizzes","categoryId","all","CategoryService","category","id","quizzTemplate","sentence","options","answers","map","item","answerTemplate","answer","correct","checked","disabled","callback","GameService","quizzes","quizzesWithTemplate","setupByCategory","Category","getPoints","reduce","points","quizz","find","Boolean","getCorrectAnswer","getPointsRanking","rightAnswers","amountOfQuizzes","getUsername","window","localStorage","getItem","authenticate","username","setItem","setUsername","prompt","QuizzesContext","createContext","QuizzesProvider","children","useState","setQuizzes","categories","setCategories","started","setStarted","loading","setLoading","showRanking","setShowRanking","useEffect","fetchedCategories","fetchCategories","handleStartGame","Quizzes","quizzesApi","handleChangeCheck","quizzIndex","newQuizzes","index","newOptions","handleFinishGame","name","User","itemOption","pointsRanking","length","RankingService","alert","toggleRanking","handleSelectCategory","Provider","value","answerClass","finished","Question","className","FormControl","component","RadioGroup","option","key","FormControlLabel","label","control","Radio","onChange","Questions","Box","display","alignItems","justifyContent","width","height","flexDirection","marginTop","marginBottom","Button","variant","onClick","color","Loading","getRanking","ranking","rankingWithTemplate","rankingTemplate","created_at","createdAt","Date","Ranking","onClose","users","setUsers","user","getDay","getMonth","getFullYear","Main","useContext","App","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.1d0dc544.chunk.js","sourcesContent":["import axios from 'axios';\n\nrequire('dotenv').config();\n\nconst apiUrl = process.env.REACT_APP_URL_API;\n\nconst api = axios.create({\n  baseURL: apiUrl,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n  }\n});\n\nexport default api;\n","import api from './api';\n\nexport const setup = async () => {\n  const { data } = await api.get('setup');\n\n  return data;\n}\n","import api from './api';\n\nexport const store = async (rankingUser) => {\n  const { data } = await api.post('ranking', rankingUser);\n\n  return data;\n}\n\nexport const show = async () => {\n  const { data } = await api.get('ranking');\n\n  return data;\n}\n","import api from './api';\n\nexport const findAll = async () => {\n  const { data } = await api.get('category');\n\n  return data;\n}\n\nexport const getQuizzes = async categoryId => {\n  const { data } = await api.get(`category/${categoryId}/movie`);\n\n  return data;\n}\n","import * as CategoryService from '../services/CategoryService';\n\nexport const all = async () => await CategoryService.findAll();\n\nexport const getQuizzes = async category => await CategoryService.getQuizzes(category.id);\n","import * as GameService from '../services/GameService';\nimport * as RankingService from '../services/RankingService';\nimport * as Category from './Category';\n\nconst quizzTemplate = ({\n  sentence,\n  answers\n}) => ({\n  sentence,\n  options: answers.map(item => answerTemplate(item.answer, item.correct))\n});\n\nconst answerTemplate = (answer, correct, checked = false, disabled = false) => ({\n  answer, correct, checked, disabled\n});\n\nexport const setup = async (callback) => {\n  const { quizzes } = await GameService.setup();\n  const quizzesWithTemplate = quizzes.map(quizzTemplate);\n\n  return callback(quizzesWithTemplate);\n};\n\nexport const setupByCategory = async (category, callback) => {\n  const { quizzes } = await Category.getQuizzes(category);\n  const quizzesWithTemplate = quizzes.map(quizzTemplate);\n\n  return callback(quizzesWithTemplate);\n}\n\nexport const updateOption = (quizzes, quizzIndex, answer) => {\n  const newQuizzes = quizzes.map((item, index) => {\n    if (index === quizzIndex) {\n      const newOptions = item.options.map(item => \n        item.answer === answer ? { ...item, checked: true } : { ...item, checked: false }\n      );\n\n      return { ...item, options: newOptions };\n    }\n\n    return { ...item }\n  });\n\n  return newQuizzes;\n}\n\nconst getCorrectAnswer = quizz => quizz.options.find(item => Boolean(item.correct));\n\nconst getPoints = quizzes => quizzes.reduce((points, quizz) => {\n  const correctAnswer = getCorrectAnswer(quizz);\n\n  if (correctAnswer.checked) {\n    return points + 1;\n  }\n\n  return points;\n}, 0)\n\nexport const finishGame = (quizzes, name) => {\n  const newQuizzes = quizzes.map(item => ({\n    ...item,\n    options: item.options.map(itemOption => ({\n      ...itemOption,\n      disabled: true\n    }))\n  }));\n  const points = getPoints(quizzes);\n  const pointsRanking = getPointsRanking(points, quizzes.length);\n  const rankingUser = { points: pointsRanking, name };\n\n  RankingService.store(rankingUser);\n\n  return { quizzes: newQuizzes, points };\n}\n\nconst getPointsRanking = (rightAnswers, amountOfQuizzes) =>\n  100 * rightAnswers / amountOfQuizzes;\n\n","export const getUsername = () => window.localStorage.getItem('username');\n\nconst setUsername = username => window.localStorage.setItem('username', username);\n\nexport const isAuthenticated = () => Boolean(getUsername());\n\nexport const authenticate = () => {\n  const username = window.prompt('Como essa é a primeira vez que você está jogando, qual seu nome?');\n  \n  setUsername(username);\n}\n","import React, { createContext, useState, useEffect } from 'react';\nimport * as Quizzes from '../models/Quizzes';\nimport * as User from '../models/User';\nimport * as Category from '../models/Category';\n\nexport const QuizzesContext = createContext();\n\nexport const QuizzesProvider = ({ children }) => {\n  const [ quizzes, setQuizzes ] = useState([]);\n  const [ categories, setCategories ] = useState([]);\n  const [ started, setStarted ] = useState(false);\n  const [ loading, setLoading ] = useState(true);\n  const [ showRanking, setShowRanking ] = useState(false);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      const { categories: fetchedCategories } = await Category.all();\n\n      setCategories(fetchedCategories)\n      setLoading(false);\n    }\n\n    fetchCategories();\n  }, []);\n\n  const toggleRanking = () => setShowRanking(!showRanking);\n\n  const handleStartGame = () => {\n    setLoading(true);\n\n    const setupCallback = quizzesApi => {\n      setQuizzes(quizzesApi);\n      setStarted(true);\n      setLoading(false);\n    }\n\n    setQuizzes(Quizzes.setup(setupCallback));\n  }\n\n  const handleSelectCategory = category => {\n    setLoading(true);\n\n    const setupCallback = quizzesApi => {\n      setQuizzes(quizzesApi);\n      setStarted(true);\n      setLoading(false);\n    }\n\n    setQuizzes(Quizzes.setupByCategory(category, setupCallback));\n  }\n\n  const handleChangeCheck = (quizzIndex, answer) => {\n    const newQuizzes = Quizzes.updateOption(quizzes, quizzIndex, answer);\n\n    setQuizzes(newQuizzes);\n  }\n\n  const handleFinishGame = () => {\n    const name = User.getUsername();\n    const { quizzes: newQuizzes, points } = Quizzes.finishGame(quizzes, name);\n\n    alert(`Você acertou ${points} de ${newQuizzes.length} perguntas.`);\n\n    setStarted(false);\n    setQuizzes(newQuizzes);\n  }\n\n  const store = {\n    quizzes, started,\n    handleStartGame, handleChangeCheck,\n    handleFinishGame, loading, toggleRanking,\n    showRanking, categories, handleSelectCategory\n  };\n\n  if (!User.isAuthenticated()) User.authenticate();\n\n  return (\n    <QuizzesContext.Provider value={store}>\n      { children }\n    </QuizzesContext.Provider>\n  )\n}\n","import React from 'react';\nimport { FormControl, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\n\nimport './index.scss';\n\nconst answerClass = (finished, correct) => \n  `\n    Question__answer\n    ${ finished && correct ? 'Question__answer--correct': '' }\n  `;\n\nconst Question = ({\n  sentence,\n  options,\n  handleChangeCheck,\n  finished\n}) => (\n  <div className=\"Question\">\n    <h2 className=\"Question__title\">\n      { sentence }\n    </h2>\n    <FormControl component=\"fieldset\">\n      <RadioGroup>\n        {\n          options.map((option, index) => (\n            <div\n              className={answerClass(finished, option.correct)}\n              key={`${option.answer}-${index}`}\n            >\n              <FormControlLabel\n                value={option.answer}\n                label={option.answer}\n                control={<Radio />}\n                checked={option.checked}\n                onChange={() => handleChangeCheck(option.answer)}\n                disabled={option.disabled}\n              />\n            </div>\n          ))\n        }\n      </RadioGroup>\n    </FormControl>\n  </div>\n);\n\nexport default Question;\n","import React from 'react';\nimport Question from '../Question';\nimport { Button, Box } from '@material-ui/core';\n\nconst Questions = ({\n  quizzes,\n  handleChangeCheck,\n  handleFinishGame,\n  started\n}) => (\n  <div className=\"Questions\">\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      width=\"100vw\"\n      height=\"auto\"\n      flexDirection=\"column\"\n    >\n      {\n        quizzes.map((item, index) => (\n          <Question\n            key={`${item.sentence}-${index}`}\n            sentence={item.sentence}\n            options={item.options}\n            handleChangeCheck={answer => handleChangeCheck(index, answer)}\n            finished={!started}\n          />\n        ))\n      }\n      {\n        started && (\n          <Box marginTop=\"30px\" marginBottom=\"30px\">\n            <Button variant=\"contained\" onClick={handleFinishGame} color=\"primary\">\n              Checar respostas\n            </Button>\n          </Box>   \n        )\n      }\n    </Box>\n  </div>  \n);\n\nexport default Questions;\n","import React from 'react';\n\nimport './index.scss';\n\nconst Loading  = () => (\n  <div className=\"Loading\">\n    <span className=\"Loading__spinner\"></span>\n  </div>\n);\n\nexport default Loading;\n","import * as RankingService from '../services/RankingService';\n\nexport const getRanking = async (callback) => {\n  const { ranking } = await RankingService.show();\n  const rankingWithTemplate = ranking.map(rankingTemplate);\n\n  return callback(rankingWithTemplate);\n}\n\nconst rankingTemplate = ({\n  id, points, created_at, name\n}) => ({\n  name, id, points, createdAt: new Date(created_at)\n});\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { getRanking } from '../../models/Ranking';\n\nimport './index.scss';\n\nconst Ranking = ({ onClose }) => {\n  const [ users, setUsers ] = useState([]);\n\n  useEffect(() => {\n    getRanking(setUsers);\n  }, []);\n\n  return (\n    <div className=\"RankingBackground\">\n      <div className=\"Ranking\">\n        <span className=\"Ranking__close-button\" onClick={onClose}>X</span>\n        <div className=\"Ranking__header\">\n          <h2 className=\"Ranking__area\">\n            Nome\n          </h2>\n          <h2 className=\"Ranking__area\">\n            Pontuação\n          </h2>\n          <h2 className=\"Ranking__area\">\n            Data\n          </h2>\n        </div>\n        <div className=\"Ranking__body\">\n          {\n            users.map(user => (\n              <Fragment key={user.id}>\n                <h2 className=\"Ranking__area\">\n                  { user.name }\n                </h2>\n                <h2 className=\"Ranking__area\">\n                  { user.points }%\n                </h2>\n                <h2 className=\"Ranking__area\">\n                  { `${user.createdAt.getDay()}/${user.createdAt.getMonth() + 1}/${user.createdAt.getFullYear()}` }\n                </h2>\n              </Fragment>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default Ranking;\n","import React, { useContext } from 'react';\nimport { QuizzesContext } from '../../contexts/quizzes';\nimport { Box, Button } from '@material-ui/core';\nimport Questions from '../../components/Questions';\nimport Loading from '../../components/Loading';\nimport Ranking from '../../components/Ranking';\n\nconst Main = () => {\n  const {\n    started,\n    handleStartGame,\n    quizzes,\n    handleChangeCheck,\n    handleFinishGame,\n    loading,\n    toggleRanking,\n    showRanking,\n    handleSelectCategory,\n    categories\n  } = useContext(QuizzesContext);\n\n  if (loading) return <Loading />\n\n  return (\n    <>\n      <Questions\n        quizzes={quizzes}\n        handleChangeCheck={handleChangeCheck}\n        handleFinishGame={handleFinishGame}\n        started={started}\n      />\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-around\"\n        flexDirection=\"column\"\n        width=\"100vw\"\n        height=\"100vh\"\n      >\n        <Button\n          variant=\"contained\"\n          onClick={handleStartGame}\n          color=\"primary\"\n          disabled={started}\n        >\n          Jogar com todos temas\n        </Button>\n        {\n          categories.map(category => (\n            <Button\n              variant=\"contained\"\n              onClick={() => handleSelectCategory(category)}\n              color=\"primary\"\n              disabled={started}\n              key={category.id}\n            >\n              { category.name }\n            </Button>\n          ))\n        }\n        <Button\n          variant=\"contained\"\n          onClick={toggleRanking}\n          color=\"primary\"\n        >\n          Ranking\n        </Button>\n      </Box>\n      {\n        showRanking && (\n          <Ranking onClose={toggleRanking} />\n        )\n      }\n    </>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport Main from './pages/Main';\nimport { QuizzesProvider } from './contexts/quizzes';\n\nconst App = () => (\n  <QuizzesProvider>\n    <Main />\n  </QuizzesProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as ServiceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nServiceWorker.register();\n"],"sourceRoot":""}